#stap callgraph_text.stp -DSTP_NO_OVERLOAD -DMAXSKIPPED=100000 -DMAXACTION=100000 -DMAXMAPENTRIES=10000 -w
global call_graph[10000]

@__private30 global _indent_counters

@__private30 function my_thread_indent_depth:long (delta)
{
    # pre-increment for positive delta and post-decrement for negative delta
    x = _indent_counters[tid()] + (delta < 0 ? delta : 0)
    _indent_counters[tid()] += delta

    return (x>0 ? x : 0)

}

probe sshd_funcs = process("/usr/sbin/sshd").function("*"),
              process("/usr/lib64/security/*.so").function("*")

probe rocm_funcs = process("/opt/rocm/lib/libhc_am.so.3").function("*"),
        process("/opt/rocm/lib/libmcwamp.so.3").function("*"),
        process("/opt/rocm/lib/libhip_hcc.so.3").function("*"),
        process("/opt/rocm/lib/libhsa-runtime64.so.1").function("*"),
        process("/opt/rocm/lib/librocblas.so").function("*"),
        process("/opt/rocm/lib/libamd_comgr.so.1").function("*"),
        process("/opt/rocm/lib/libhsakmt.so.1").function("*"),
        process("/opt/rocm/hsa/lib/libhsa-ext-image64.so.1").function("*"),
        process("/root/mengzhi/dgemm_scard_nobind/dcudgemm_stress.out").function("*")
{}
         
probe rocm_funcs
{
   /* TODO:
    * Check for duplicate function calls with the same call depth in different functions
    * This requires the systemtap associative array to support the insert operation to avoid it.
    */
   depth = my_thread_indent_depth(2)
   call_graph[tid(), depth, probefunc()]++ 
}
probe rocm_funcs.return
{
  my_thread_indent_depth(-2)
}

function print_header(tid){
  printf("/*--------------------------------------------------\n")
  printf("                     %d                          \n", tid)
  printf("----------------------------------------------------*/\n")
}

function print_tree()
{
    thrid = 0
    foreach([t+, depth, func] in call_graph) {
        if (thrid != t) {
            print_header(t)
            thrid = t
        }
        printf("%s%s\n", sprintf("%-*s",depth,""), func)
    }
}

function print_func()
{
    thrid = 0
    last_depth = -1
    foreach([t+, depth, func] in call_graph) {
        if (thrid != t) {
            if (thrid != 0){
               #printf("}\n")
               for(i = last_depth; i >= 0; i-=2) {
                 printf("%s}\n", sprintf("%-*s", i, ""))
               }
               last_depth = -1
            }
            print_header(t)
            thrid = t
        }
        if(depth == last_depth) {
           printf("%s}\n", sprintf("%-*s", last_depth, ""))
        } else if (depth < last_depth){
           for(i = last_depth; i >= depth; i-=2) {
             printf("%s}\n", sprintf("%-*s", i, ""))
           }
        }
        if (depth - last_depth > 2) { //fix lost something
            for(i = last_depth + 2; i < depth; i+=2) {
              printf("%s{\n", sprintf("%-*s", i, ""))
            }
        }
        printf("%s%s(){\n", sprintf("%-*s", depth, ""), func)
        last_depth = depth
    }
    #printf("}\n")
    for(i = last_depth; i >= 0; i-=2) {
        printf("%s}\n", sprintf("%-*s", i, ""))
    }
}

probe end
{
    print_func()
}
