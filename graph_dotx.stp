#!/usr/bin/env stap
#stap -g callgraph.stp -DSTP_NO_OVERLOAD

@define amdgpu %("amdgpu"%)
@define amdttm %("amdttm"%)
#@define ttm %("ttm"%)
@define funcenter %(module(@amdgpu).function("*").call, module(@amdttm).function("*").call%)
global start = 0
global level_depth = 0
global nodename

function trace(entry_p, enter) {
    depth = thread_indent_depth(entry_p)
	nodename[depth] = ppfunc()
	if ((depth > 0) && (enter > 0)) {
		printf("\t\"%s\" -> \"%s\";\n", nodename[depth - entry_p], nodename[depth]);
	}
}

/*
#with -g

%{
char *dot_header = "digraph G{\n\
\trankdir=TB;\n\
\tsize=\"1920,1080\";\n\
\tnode [fontsize=16,fontcolor=blue,style=filled,fillcolor=Wheat,shape=box];";
%}

probe begin{printf("%s\n",kernel_string(%{dot_header%}))}

*/

probe begin{
    printf("digraph G{\n")
	printf("\trankdir=TB;\n")
	printf("\tsize=\"1920,1080\"\n");
	printf("\tnode [fontsize=16,fontcolor=blue,style=filled,fillcolor=Wheat,shape=box];\n")
}

probe module(@amdgpu).function("*").call,
      module(@amdttm).function("*").call {
	  
    if ((start == 1) && (execname() == "kfdtest")) {	
        trace(1, 1)
    }
}

probe module(@amdgpu).function("*").return,
      module(@amdttm).function("*").return{ 
      if ((start == 1) && (execname() == "kfdtest")) {
	      trace(-1, 0)
      }
}

probe module(@amdgpu).function("kfd_ioctl"){
	cmd = register("si")
	if ((cmd == 0x4b16) && //alloc_memory_of_gpu
	   (execname() == "kfdtest")) { 
	   start = 1
	   trace(1, 1)
	}
}
probe module(@amdgpu).function("kfd_ioctl").return {
	start = 0
}

probe end{printf("}\n")}


