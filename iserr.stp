# stap -vg iserr.stp -DSTP_NO_OVERLOAD
# for more info about function, eg:
# stap -vve 'probe module(@amdgpu).statement("amdgpu_bo_do_create@*:*"){printf("%s %s \n",pp(),$$vars)}'

@define amdgpu %("/lib/modules/3.10.0-693.el7.x86_64/updates/dkms/amdgpu.ko"%)

global entstr
global dump_stack_flag
global errcnt = 0
global stop_on_err_cnt = -1

probe funcs = module(@amdgpu).function("*")
{}

function is_error:long(value:long)
%{
    STAP_RETURN(IS_ERR_VALUE(STAP_ARG_value));
%}

probe funcs.call
{
   try{
        if(@defined($$parms)) {
           entstr[tid(),ppfunc()] = $$parms
        } else {
               arg1 = ulong_arg(1) 
               arg2 = ulong_arg(2) 
               arg3 = ulong_arg(3) 
               arg4 = ulong_arg(4)
               entstr[tid(), ppfunc()] = 
                    sprintf("arg1=0x%x, arg2=0x%x, arg3=0x%x, arg4=0x%x", 
                             arg1, arg2, arg3, arg4)
        }
   } catch {
        entstr[tid(),ppfunc()] = "..."
   }
}

probe funcs.return
{   
    //retval = register("ax")
    if (@defined($return)) {
        retval = $return
        if (is_error(retval)) {
            if (dump_stack_flag[tid()] == 0) {
                dump_stack_flag[tid()] = 1
                printf("\n\n%s, pid: %d \n", execname(), tid())
                print_ksyms(backtrace())
            }
            entry_str = entstr[tid(),ppfunc()]
            printf("%s(%s), return: %d (%s)\n", ppfunc(), entry_str, retval, errno_str(retval))
            errcnt++
            if((stop_on_err_cnt != -1) && (errcnt == stop_on_err_cnt)){
                %{send_sig(SIGTSTP, current, 0)%}     
            }
        } 
    } 
    
    delete  entstr[tid(),ppfunc()]
    
    if (ppfunc() == "kfd_ioctl") {
       if (dump_stack_flag[tid()] != 0) {
           dump_stack_flag[tid()] = 0
           printf("\n")
       }
    }
    
}

