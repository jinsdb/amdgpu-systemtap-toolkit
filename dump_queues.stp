# stap -vv dump_queues.stp -g -DSTP_NO_OVERLOAD -o queues.log

@define amdgpu %("/lib/modules/3.10.0-693.el7.x86_64/updates/dkms/amdgpu.ko"%)
//@define amdgpu %("/lib/modules/3.10.0-957.el7.x86_64/updates/dkms/amdgpu.ko"%)

%{
#ifndef STAP_OVERRIDE_STUCK_CONTEXT
   #define STAP_OVERRIDE_STUCK_CONTEXT 1
#endif
#include <kfd_priv.h>

typedef struct kfd_process *(*pfn_kfd_lookup_process_t)(unsigned int pasid);
typedef void (*pfn_kfd_unref_process_t)(struct kfd_process *p);

pfn_kfd_lookup_process_t my_lookup_process_by_pasid = NULL;
pfn_kfd_unref_process_t my_unref_process = NULL;

void kfd_print_buffer(void *kbuf, uint64_t len)
{
    uint32_t data = 0;
    int32_t i, j = 0;
    
    for (i = 0; i < len; i += 4) {
        if (j%4 == 0) {
            _stp_printf("\n0x%016llx: ", kbuf + i);
        }
        data = *(uint32_t *)(kbuf + i);
        _stp_printf("0x%08x	", data);
        j++;
    }
}

%}

function kfd_process_queues_dump(pasid:long)
%{
    int32_t len2 = 0,ret = 0;
    uint64_t queue_address = 0;
    uint64_t queue_size = 0;
    
    bool is_active = 0;
    void *kaddr;
    struct page *page;
    struct vm_area_struct *vma;
    struct queue *q = NULL;
    struct kfd_process *p = NULL;
    struct process_queue_node *pqn = NULL;
    
    struct task_struct *task;
	struct mm_struct *mm;
    
    struct amdkfd_process_info *process_info;
	
    char *formart[2] = {"PM4", "AQL"};
    char *queue_type[5] = {"computer", "sdma", "hiq", "diq", "sdma_xgmi"};
 
    unsigned int pasid = STAP_ARG_pasid;
    p = my_lookup_process_by_pasid(pasid);
    if (!p) {
        _stp_printf("Cannot find process info  for pasid %d\n", pasid);
        return;
    }
    
    process_info = (struct amdkfd_process_info *)p->kgd_process_info;
    _stp_printf("process pid: %d\n", pid_nr(process_info->pid));
	task = get_pid_task(process_info->pid, PIDTYPE_PID);
	if (!task) {
        _stp_printf("Cannot find task for pid: %d\n", pid_nr(process_info->pid));
        my_unref_process(p);
		return;
    }
    
	mm = get_task_mm(task);
	if (!mm) {
        _stp_printf("Cannot get task mm for pid: %d\n", pid_nr(process_info->pid));
		put_task_struct(task);
        my_unref_process(p);
		return;
	}
    _stp_printf("TSTP task  for pid: %d\n", pid_nr(process_info->pid));
    //send_sig(SIGTSTP, task, 0);
    mutex_lock(&p->mutex);
    list_for_each_entry(pqn, &p->pqm.queues, process_queue_list) {

        q = pqn->q;
        if (q == NULL) {
            continue;
        }
        
        queue_address = q->properties.queue_address;
        queue_size    = q->properties.queue_size;
        if (queue_address == 0) {	
            continue;        
        }
        is_active = q->properties.is_active;
        _stp_printf("\nDump queue, qid: %d, qtype: %s, formart: %s, is_active: %d \n", 
                   q->properties.queue_id, 
                   queue_type[q->properties.type],
                   formart[q->properties.format],
                   is_active);
		ret = get_user_pages_remote(task, mm, queue_address, 1,
			                        FOLL_DUMP, &page, &vma, NULL);
        if (ret > 0) {   
            kaddr = kmap_atomic(page);
            kfd_print_buffer(kaddr, queue_size);
            kunmap_atomic(kaddr);
            put_page(page);    
        } else {
            _stp_printf("get user page addr 0x%016lx failed,ret =%d\n",  queue_address, ret);
            
            vma = find_vma(mm, queue_address);
			if (!vma || vma->vm_start > queue_address)
				continue;
			if (vma->vm_ops && vma->vm_ops->access) {              
                kaddr = vmalloc(queue_size);
                if (kaddr == NULL) 
                    continue;
				ret = vma->vm_ops->access(vma, queue_address, kaddr,
							  queue_size, 0);
                if (ret <= 0) {
                    vfree(kaddr); 
                    continue;  
                }                                  
                kfd_print_buffer(kaddr, queue_size);
                vfree(kaddr);           
            }
        }
        
        _stp_printf("\n");
        
    }
     
    mutex_unlock(&p->mutex);        
    my_unref_process(p);
    mmput(mm);
	put_task_struct(task);

%}

function find_proces_ops_init:long()
%{
    
    my_lookup_process_by_pasid = (pfn_kfd_lookup_process_t)kallsyms_lookup_name("kfd_lookup_process_by_pasid");
    my_unref_process = (pfn_kfd_unref_process_t)kallsyms_lookup_name("kfd_unref_process");
    if ((my_lookup_process_by_pasid == NULL) || 
        (my_unref_process == NULL)){
        _stp_printf("failed to find kfd_lookup_process_by_pasid function.\n");
        STAP_RETURN(-1); 
    }
    
    _stp_printf("kfd_lookup_process_by_pasid: 0x%lx\n", my_lookup_process_by_pasid);
    _stp_printf("kfd_unref_process: 0x%lx\n", my_unref_process);
    STAP_RETURN(0); 
%}

probe begin{
    ret = find_proces_ops_init()
    if (ret != 0) {
        exit()
    }
    //printf("start dump queue,pasid: 32769\n");
    //kfd_process_queues_dump(32769)
}

probe module(@amdgpu).function("kfd_process_vm_fault"){
   kfd_process_queues_dump($pasid)
}


