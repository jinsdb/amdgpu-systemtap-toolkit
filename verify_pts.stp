#stap -vv verify_pts.stp -g -DMAXMAPENTRIES=10000 -DMAXACTION=102400 -F -S 1,3 -o ./pg_tbl.log

@define amdgpu %("/lib/modules/3.10.0-693.el7.x86_64/updates/dkms/amdgpu.ko"%)

global vm_page_table%
global gart_table
global page_table%

%{
#include <asm/io.h>
typedef void (*pfn_hdp_flush_t)(void *adev, void *ring);
typedef void (*pfn_flush_gpu_tlb_t)(void *adev, uint32_t vmid, uint32_t flush_type);
%}

function amdgpu_asic_flush_hdp(flush_hdp:long, adev:long)
%{
	mb();
    ((pfn_hdp_flush_t)STAP_ARG_flush_hdp)((void*)STAP_ARG_adev, NULL);
%}

function amdgpu_gmc_flush_gpu_tlb(flush_gpu_tlb:long, adev:long, vmid:long, type:long)
%{
	mb();
    ((pfn_flush_gpu_tlb_t)STAP_ARG_flush_gpu_tlb)((void*)STAP_ARG_adev, STAP_ARG_vmid, STAP_ARG_type);
%}

function amdgpu_vm_map_gart:long(pages_addr:long, addr:long)
%{
	uint64_t result;

	/* page table offset */
	result = ((const dma_addr_t *)STAP_ARG_pages_addr)[STAP_ARG_addr >> PAGE_SHIFT];

	/* in case cpu page size != gpu page size*/
	result |= STAP_ARG_addr & (~PAGE_MASK);

	result &= 0xFFFFFFFFFFFFF000;

	STAP_RETURN(result);
%}
# static int check_hbm_data(struct amdgpu_device *adev, uint64_t value,void *ptr)
function check_hbm_data:long (value:long, ptr:long)
%{
	uint64_t read_back_v = 0;
	//soc15_flush_hdp((void)STAP_ARG_adev, NULL);
	read_back_v = readq((void __iomem *)STAP_ARG_ptr);
	if(STAP_ARG_value != read_back_v){
        _stp_printf("write value: %llx, readback data: %llx \n", STAP_ARG_value, read_back_v);
		STAP_RETURN(-EINVAL); 
	}else
		STAP_RETURN(0); 

%}

/*
# $p:struct amdgpu_vm_update_params* $bo:struct amdgpu_bo* $pe:uint64_t 
# $addr:uint64_t $count:unsigned int 
# $incr:uint32_t $flags:uint64_t
probe module(@amdgpu).function("amdgpu_vm_cpu_update")
{
      printf("amdgpu_vm_cpu_update: pe: %lx, addr: %lx, count: %d, incr: %d, flags: %lx\n",
              $pe, $addr, $count, $incr, $flags)
}
*/
/*
# $p:struct amdgpu_vm_update_params* $bo:struct amdgpu_bo* 
# $pe:uint64_t $addr:uint64_t $count:unsigned int $incr:uint32_t 
# $flags:uint64_t $i:unsigned int
probe module(@amdgpu).statement("amdgpu_vm_cpu_update@amdgpu_vm_cpu.c:100")
{
    adev = $p->adev
    fhdp = adev->asic_funcs->flush_hdp
    if (fhdp) {
       amdgpu_asic_flush_hdp(fhdp, adev)
    }
    
    addr_val = $p->pages_addr ?
			amdgpu_vm_map_gart($p->pages_addr, $addr) :
			$addr;
            
    value = addr_val & 0x0000FFFFFFFFF000
    value |= $flags
    
    addr = $pe + ($i * 8)
    
    is_bad = check_hbm_data(value, addr)
    if (is_bad) {
        printf("amdgpu_vm_cpu_update: pe: %lx, addr: %lx, count: %d, incr: %d, flags: %lx\n",
              $pe, $addr, $count, $incr, $flags)
        printf("current page: %d\n", $i)
        printf("send sig SIGTSTP to pid:%d\n", task_pid(%{current%}))
		%{send_sig(SIGTSTP, current, 0)%}
    }
    //vm_page_table[addr] = value
}
*/

/*
$return:int 
$p:struct amdgpu_vm_update_params* 
$bo:struct amdgpu_bo* 
$pe:uint64_t 
$addr:uint64_t 
$count:unsigned int 
$incr:uint32_t 
$flags:uint64_t
*/
probe module(@amdgpu).function("amdgpu_vm_cpu_update").return
{
    adev = @entry($p->adev)
    fhdp = @entry($p->adev->asic_funcs->flush_hdp)
    if (fhdp) {
       amdgpu_asic_flush_hdp(fhdp, adev)
    }
    
    addr = @entry($addr)
    for (i = 0; i < @entry($count); i++) {
        addr_val = @entry($p->pages_addr) ?
                amdgpu_vm_map_gart(@entry($p->pages_addr), addr) :
                addr
                
        value = addr_val & 0x0000FFFFFFFFF000
        value |= @entry($flags)

        pt_addr = @entry($pe) + @entry($bo->kmap->virtual) + (i * 8)

        is_bad = check_hbm_data(value, pt_addr)
        if (is_bad) {
            printf("amdgpu_vm_cpu_update: pe: %lx, addr: %lx, count: %d, incr: %d, flags: %lx\n",
                  @entry($pe), @entry($addr), @entry($count), @entry($incr), @entry($flags))
            printf("current page: %d\n", i)
            printf("send sig SIGTSTP to pid:%d\n", task_pid(%{current%}))
            %{send_sig(SIGTSTP, current, 0)%}
        }
 
        addr += @entry($incr)
    }
}

/*
 $adev:struct amdgpu_device* 
 $offset:uint64_t 
 $pages:int 
 $dma_addr:dma_addr_t* 
 $flags:uint64_t 
 $dst:void* 
 $page_base:uint64_t 
 $i:unsigned int 
 $j:unsigned int 
 $t:unsigned int
*/
probe module(@amdgpu).function("amdgpu_gart_map").return
{
    pages = @entry($pages)
    t = @entry($offset) / 4096
    
    for (i = 0; i < pages; i++) {
	    page_base = @cast(@entry($dma_addr), "dma_addr_t")[i]
        addr = @entry($dst) + (t * 8)
        value = page_base & 0x0000FFFFFFFFF000
        value |= @entry($flags)
        
        is_bad = check_hbm_data(value, addr)
        if (is_bad) {
                printf("amdgpu_gart_map: offset: %lx, pages: %lx, flags: %lx\n",
                      @entry($offset), @entry($pages), @entry($flags))
                printf("current page: %d\n", i)
                printf("send sig SIGTSTP to pid:%d\n", task_pid(%{current%}))
                %{send_sig(SIGTSTP, current, 0)%}
                print_backtrace()
        }
        //gart_table[addr] = value
        t++
	    page_base += 4096;
        
	}
}

/*
$return:int 
$adev:struct amdgpu_device* 
$offset:uint64_t 
$pages:int 
$flags:uint64_t

probe module(@amdgpu).function("amdgpu_gart_unbind").return 
{
}
*/


probe kprobe.module(@amdgpu).function("amdgpu_gmc_set_pte_pde") {
  //printf("adev:%lx, pt_addr: %lx, idx: %lx, addr: %lx, flags: %lx\n", register("rdi"),register("rsi"), register("rdx"),register("rcx"),register("r8"))
    pt_addr = register("rsi")
    idx     = register("rdx")
    addr_val = register("rcx")
    flags    = register("r8")

    value = addr_val & 0x0000FFFFFFFFF000
    value |= flags
    
    ptr = pt_addr + (idx * 8)
    page_table[ptr] = value
    
}


probe module(@amdgpu).function("amdgpu_vm_free_table")
{
   pt = $entry->base->bo
   if (pt == 0) {
     next;
   }
   
   entries = (pt->tbo->num_pages << 12)/8
   kptr = pt->kmap->virtual
   #printf("free table: 0x%016lx, enties:%d \n", kptr, entries)
   for (i = 0; i < entries; i++){
       addr = kptr + i*8
       if ([addr] in page_table) {
            value = page_table[addr]
            is_bad = check_hbm_data(value, addr)
            if (is_bad) {
                printf("[0x%016lx] amdgpu_vm_free_table check data failed.\n", addr)
                printf("send sig SIGTSTP to pid:%d\n", task_pid(%{current%}))
                %{send_sig(SIGTSTP, current, 0)%}
            }
       }
       delete page_table[addr]
   }

}


function readq:long (addr:long)
%{
    uint64_t read_back_v = 0;
	read_back_v = readq((void __iomem *)STAP_ARG_addr);
    STAP_RETURN(read_back_v);
%}

function dump_page_table()
{
    /*
    printf("vm page table:\n")
    foreach ([addr+] in vm_page_table) {
        hbm_vale = readq(addr)
        if (hbm_vale != vm_page_table[addr]) {
            printf("[%lx]: 0x%016lx, 0x%016lx <==\n", addr, vm_page_table[addr], hbm_vale)
        } else {
            printf("[%lx]: 0x%016lx, 0x%016lx\n", addr, vm_page_table[addr], hbm_vale)
        }
    }
    
    printf("gart table:\n")
    foreach ([addr+] in gart_table) {
        hbm_vale = readq(addr)
        if (hbm_vale != gart_table[addr]) {
            printf("[%lx]: 0x%016lx, 0x%016lx <==\n", addr, gart_table[addr], hbm_vale)
        } else {
            printf("[%lx]: 0x%016lx, 0x%016lx\n", addr, gart_table[addr], hbm_vale)
        }
    }
    */
    
    printf("page_table:\n")
    foreach ([addr+] in page_table) {
        hbm_vale = readq(addr)
        if (hbm_vale != page_table[addr]) {
            printf("[%lx]: 0x%016lx, 0x%016lx <==\n", addr, page_table[addr], hbm_vale)
        } else {
            printf("[%lx]: 0x%016lx, 0x%016lx\n", addr, page_table[addr], hbm_vale)
        }
    }
    
}

probe procfs("page_table").write { 
    dump_page_table()
}

probe end {
   dump_page_table()
}